// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecases

import (
	"context"
	"gorm.io/gorm"
	"sync"
	"undefeated-davout/echo-api-sample/entities"
)

// Ensure, that TaskListerMock does implement TaskLister.
// If this is not the case, regenerate this file with moq.
var _ TaskLister = &TaskListerMock{}

// TaskListerMock is a mock implementation of TaskLister.
//
//	func TestSomethingThatUsesTaskLister(t *testing.T) {
//
//		// make and configure a mocked TaskLister
//		mockedTaskLister := &TaskListerMock{
//			ListTasksFunc: func(ctx context.Context, db *gorm.DB, id entities.UserID) ([]entities.Task, error) {
//				panic("mock out the ListTasks method")
//			},
//		}
//
//		// use mockedTaskLister in code that requires TaskLister
//		// and then make assertions.
//
//	}
type TaskListerMock struct {
	// ListTasksFunc mocks the ListTasks method.
	ListTasksFunc func(ctx context.Context, db *gorm.DB, id entities.UserID) ([]entities.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListTasks holds details about calls to the ListTasks method.
		ListTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// ID is the id argument value.
			ID entities.UserID
		}
	}
	lockListTasks sync.RWMutex
}

// ListTasks calls ListTasksFunc.
func (mock *TaskListerMock) ListTasks(ctx context.Context, db *gorm.DB, id entities.UserID) ([]entities.Task, error) {
	if mock.ListTasksFunc == nil {
		panic("TaskListerMock.ListTasksFunc: method is nil but TaskLister.ListTasks was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		ID  entities.UserID
	}{
		Ctx: ctx,
		Db:  db,
		ID:  id,
	}
	mock.lockListTasks.Lock()
	mock.calls.ListTasks = append(mock.calls.ListTasks, callInfo)
	mock.lockListTasks.Unlock()
	return mock.ListTasksFunc(ctx, db, id)
}

// ListTasksCalls gets all the calls that were made to ListTasks.
// Check the length with:
//
//	len(mockedTaskLister.ListTasksCalls())
func (mock *TaskListerMock) ListTasksCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	ID  entities.UserID
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		ID  entities.UserID
	}
	mock.lockListTasks.RLock()
	calls = mock.calls.ListTasks
	mock.lockListTasks.RUnlock()
	return calls
}

// Ensure, that TaskAdderMock does implement TaskAdder.
// If this is not the case, regenerate this file with moq.
var _ TaskAdder = &TaskAdderMock{}

// TaskAdderMock is a mock implementation of TaskAdder.
//
//	func TestSomethingThatUsesTaskAdder(t *testing.T) {
//
//		// make and configure a mocked TaskAdder
//		mockedTaskAdder := &TaskAdderMock{
//			AddTaskFunc: func(ctx context.Context, db *gorm.DB, t *entities.Task) error {
//				panic("mock out the AddTask method")
//			},
//		}
//
//		// use mockedTaskAdder in code that requires TaskAdder
//		// and then make assertions.
//
//	}
type TaskAdderMock struct {
	// AddTaskFunc mocks the AddTask method.
	AddTaskFunc func(ctx context.Context, db *gorm.DB, t *entities.Task) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTask holds details about calls to the AddTask method.
		AddTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// T is the t argument value.
			T *entities.Task
		}
	}
	lockAddTask sync.RWMutex
}

// AddTask calls AddTaskFunc.
func (mock *TaskAdderMock) AddTask(ctx context.Context, db *gorm.DB, t *entities.Task) error {
	if mock.AddTaskFunc == nil {
		panic("TaskAdderMock.AddTaskFunc: method is nil but TaskAdder.AddTask was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		T   *entities.Task
	}{
		Ctx: ctx,
		Db:  db,
		T:   t,
	}
	mock.lockAddTask.Lock()
	mock.calls.AddTask = append(mock.calls.AddTask, callInfo)
	mock.lockAddTask.Unlock()
	return mock.AddTaskFunc(ctx, db, t)
}

// AddTaskCalls gets all the calls that were made to AddTask.
// Check the length with:
//
//	len(mockedTaskAdder.AddTaskCalls())
func (mock *TaskAdderMock) AddTaskCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	T   *entities.Task
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		T   *entities.Task
	}
	mock.lockAddTask.RLock()
	calls = mock.calls.AddTask
	mock.lockAddTask.RUnlock()
	return calls
}

// Ensure, that UserGetterMock does implement UserGetter.
// If this is not the case, regenerate this file with moq.
var _ UserGetter = &UserGetterMock{}

// UserGetterMock is a mock implementation of UserGetter.
//
//	func TestSomethingThatUsesUserGetter(t *testing.T) {
//
//		// make and configure a mocked UserGetter
//		mockedUserGetter := &UserGetterMock{
//			GetUserByNameFunc: func(ctx context.Context, db *gorm.DB, name string) (*entities.User, error) {
//				panic("mock out the GetUserByName method")
//			},
//		}
//
//		// use mockedUserGetter in code that requires UserGetter
//		// and then make assertions.
//
//	}
type UserGetterMock struct {
	// GetUserByNameFunc mocks the GetUserByName method.
	GetUserByNameFunc func(ctx context.Context, db *gorm.DB, name string) (*entities.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserByName holds details about calls to the GetUserByName method.
		GetUserByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// Name is the name argument value.
			Name string
		}
	}
	lockGetUserByName sync.RWMutex
}

// GetUserByName calls GetUserByNameFunc.
func (mock *UserGetterMock) GetUserByName(ctx context.Context, db *gorm.DB, name string) (*entities.User, error) {
	if mock.GetUserByNameFunc == nil {
		panic("UserGetterMock.GetUserByNameFunc: method is nil but UserGetter.GetUserByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Db   *gorm.DB
		Name string
	}{
		Ctx:  ctx,
		Db:   db,
		Name: name,
	}
	mock.lockGetUserByName.Lock()
	mock.calls.GetUserByName = append(mock.calls.GetUserByName, callInfo)
	mock.lockGetUserByName.Unlock()
	return mock.GetUserByNameFunc(ctx, db, name)
}

// GetUserByNameCalls gets all the calls that were made to GetUserByName.
// Check the length with:
//
//	len(mockedUserGetter.GetUserByNameCalls())
func (mock *UserGetterMock) GetUserByNameCalls() []struct {
	Ctx  context.Context
	Db   *gorm.DB
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Db   *gorm.DB
		Name string
	}
	mock.lockGetUserByName.RLock()
	calls = mock.calls.GetUserByName
	mock.lockGetUserByName.RUnlock()
	return calls
}

// Ensure, that UserAdderMock does implement UserAdder.
// If this is not the case, regenerate this file with moq.
var _ UserAdder = &UserAdderMock{}

// UserAdderMock is a mock implementation of UserAdder.
//
//	func TestSomethingThatUsesUserAdder(t *testing.T) {
//
//		// make and configure a mocked UserAdder
//		mockedUserAdder := &UserAdderMock{
//			AddUserFunc: func(ctx context.Context, db *gorm.DB, u *entities.User) error {
//				panic("mock out the AddUser method")
//			},
//		}
//
//		// use mockedUserAdder in code that requires UserAdder
//		// and then make assertions.
//
//	}
type UserAdderMock struct {
	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(ctx context.Context, db *gorm.DB, u *entities.User) error

	// calls tracks calls to the methods.
	calls struct {
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db *gorm.DB
			// U is the u argument value.
			U *entities.User
		}
	}
	lockAddUser sync.RWMutex
}

// AddUser calls AddUserFunc.
func (mock *UserAdderMock) AddUser(ctx context.Context, db *gorm.DB, u *entities.User) error {
	if mock.AddUserFunc == nil {
		panic("UserAdderMock.AddUserFunc: method is nil but UserAdder.AddUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  *gorm.DB
		U   *entities.User
	}{
		Ctx: ctx,
		Db:  db,
		U:   u,
	}
	mock.lockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	mock.lockAddUser.Unlock()
	return mock.AddUserFunc(ctx, db, u)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//
//	len(mockedUserAdder.AddUserCalls())
func (mock *UserAdderMock) AddUserCalls() []struct {
	Ctx context.Context
	Db  *gorm.DB
	U   *entities.User
} {
	var calls []struct {
		Ctx context.Context
		Db  *gorm.DB
		U   *entities.User
	}
	mock.lockAddUser.RLock()
	calls = mock.calls.AddUser
	mock.lockAddUser.RUnlock()
	return calls
}

// Ensure, that TokenGeneratorMock does implement TokenGenerator.
// If this is not the case, regenerate this file with moq.
var _ TokenGenerator = &TokenGeneratorMock{}

// TokenGeneratorMock is a mock implementation of TokenGenerator.
//
//	func TestSomethingThatUsesTokenGenerator(t *testing.T) {
//
//		// make and configure a mocked TokenGenerator
//		mockedTokenGenerator := &TokenGeneratorMock{
//			GenerateTokenFunc: func(ctx context.Context, u entities.User) ([]byte, error) {
//				panic("mock out the GenerateToken method")
//			},
//		}
//
//		// use mockedTokenGenerator in code that requires TokenGenerator
//		// and then make assertions.
//
//	}
type TokenGeneratorMock struct {
	// GenerateTokenFunc mocks the GenerateToken method.
	GenerateTokenFunc func(ctx context.Context, u entities.User) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateToken holds details about calls to the GenerateToken method.
		GenerateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U entities.User
		}
	}
	lockGenerateToken sync.RWMutex
}

// GenerateToken calls GenerateTokenFunc.
func (mock *TokenGeneratorMock) GenerateToken(ctx context.Context, u entities.User) ([]byte, error) {
	if mock.GenerateTokenFunc == nil {
		panic("TokenGeneratorMock.GenerateTokenFunc: method is nil but TokenGenerator.GenerateToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   entities.User
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockGenerateToken.Lock()
	mock.calls.GenerateToken = append(mock.calls.GenerateToken, callInfo)
	mock.lockGenerateToken.Unlock()
	return mock.GenerateTokenFunc(ctx, u)
}

// GenerateTokenCalls gets all the calls that were made to GenerateToken.
// Check the length with:
//
//	len(mockedTokenGenerator.GenerateTokenCalls())
func (mock *TokenGeneratorMock) GenerateTokenCalls() []struct {
	Ctx context.Context
	U   entities.User
} {
	var calls []struct {
		Ctx context.Context
		U   entities.User
	}
	mock.lockGenerateToken.RLock()
	calls = mock.calls.GenerateToken
	mock.lockGenerateToken.RUnlock()
	return calls
}
